<!DOCTYPE html>
<html>

<head>
  <title>DreamSignage</title>
  <link rel="icon" type="image/x-icon" href="/img/DreamSignage-Logo-Light-Icon.ico">
  <script src="js/pdf.js"></script>
  <script src="js/anime.min.js"></script>
  <script src='/socket.io/socket.io.js'></script>
  <link rel="stylesheet" href="css/display.css">

</head>

<body id="contentBody">
  <div id="cc"></div>
  <div id="loadInidcator" class="center">
    <h1>DreamSignage</h1>
    <h2 id="waitingTxt">Waiting for content</h1>
      <h2 id="loadingTxt">Loading content</h1>
        <div class="loader"></div>
  </div>
</body>

<script>
  // Create a socket connection
  var socket = io();
  // Initial declarations
  var fileList = [];
  var currentIndex = 0;
  var isPlaying = false;
  var currentVideo = null;
  var videoList = [];
  var contentPromises = [];
  var contentTime = 20;
  var currentPage = 0; // variable to store current page being shown
  var pageList = []; // array to store all pages
  var contentList = []; // array to store all pages, images, and videos
  var singleFileDisplayed = false; // When the content has only a single file it should "change" the content only once

  function Reset() {
    fileList = [];
    currentIndex = 0;
    isPlaying = false;
    currentVideo = null;
    videoList = [];
    contentPromises = [];
    currentPage = 0;
    pageList = [];
    contentList = [];
    singleFileDisplayed = false;

    var id = window.setTimeout(function () { }, 0);
    while (id--) {
      window.clearTimeout(id); // will do nothing if no timeout with id is present
    }
  }

  // When the 'filelist' event is received from the server
  socket.on('filelist', async (data) => {
    // Initialize the file list
    fileList = data;
    // Sort the file list
    fileList.sort((a, b) => {
      const regex = /^[0-9]/;
      const aStartsWithNumber = regex.test(a);
      const bStartsWithNumber = regex.test(b);

      // If both files start with a number, use numeric comparison
      // If only one starts with a number, it comes first
      // If neither start with a number, use alphabetical comparison
      if (aStartsWithNumber && bStartsWithNumber) {
        return a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' });
      } else if (aStartsWithNumber) {
        return -1;
      } else if (bStartsWithNumber) {
        return 1;
      } else {
        return a.localeCompare(b, undefined, { sensitivity: 'base' });
      }
    });

    console.log(fileList);

    // Handle each file according to its type (pdf, image, or video)
    for (let i = 0; i < fileList.length; i++) {
      const file = fileList[i];
      if (file.endsWith('.pdf')) {
        await handlePDF(file, i);
      } else if (file.endsWith('.jpg') || file.endsWith('.jpeg') || file.endsWith('.png') || file.endsWith('.gif') || file.endsWith('.svg') || file.endsWith('.webp')) {
        await handleImage(file, i);
      } else if (file.endsWith('.mp4') || file.endsWith('.webm')) {
        await handleVideo(file, i);
      }
    }

    if (fileList.length == 0) {
      document.getElementById("waitingTxt").style.opacity = 1;
      document.getElementById("loadingTxt").style.opacity = 0;
    } else {
      document.getElementById("loadingTxt").style.opacity = 1;
      document.getElementById("waitingTxt").style.opacity = 0;
      // Hide loading indicator and start content transition
      setTimeout(function () {
        anime({
          targets: document.getElementById("loadInidcator"),
          opacity: [1, 0],
          duration: 2000,
          easing: 'easeInOutSine',
          complete: function (anim) {
            document.getElementById("loadInidcator").style.display = "none";
            ChangeFile();
          }
        });
      }, 2 * 1000);
    }
  });


  // When the 'reload' event is received from the server, reload the page
  socket.on('update', (data) => {
    Reset();
    document.getElementById("loadingTxt").style.opacity = 0;
    document.getElementById("cc").innerHTML = '';
    document.getElementById("loadInidcator").style.display = null;
    document.getElementById("loadInidcator").style.opacity = 1;
    socket.emit('requpdate', {});
    console.log("Content changed!");
  });


  // When the 'settings' event is received from the server, change settings
  socket.on('settings', (data) => {
    if (data.contentTime) contentTime = data.contentTime;
    if (data.backgroundColor) document.getElementById("contentBody").style.backgroundColor = data.backgroundColor;
  });


  // Calculate viewport size, considering device pixel ratio
  function calculateViewportSize() {
    const width = document.documentElement.clientWidth * window.devicePixelRatio || document.body.clientWidth * window.devicePixelRatio;
    const height = document.documentElement.clientHeight * window.devicePixelRatio || document.body.clientHeight * window.devicePixelRatio;
    return { width, height };
  }


  // Handle a PDF file
  function handlePDF(file, index) {
    return new Promise((resolve, reject) => {
      pdfjsLib.getDocument("content/" + file).promise.then(async (pdf) => {
        var numPages = pdf.numPages;

        const processPage = async (pageIndex) => {
          if (pageIndex > numPages) return; // No more pages to process

          await new Promise((resolvePage, rejectPage) => {
            pdf.getPage(pageIndex).then(page => {
              const viewportSize = calculateViewportSize();
              const viewport = page.getViewport({ scale: 1.0, ...viewportSize });

              const scale = Math.min(viewportSize.width / viewport.width, viewportSize.height / viewport.height);
              const scaledViewport = page.getViewport({ scale });

              var fileView = document.createElement("div");
              fileView.setAttribute("id", "pdf-" + index + "-" + pageIndex);
              fileView.setAttribute("class", "pdf-viewer hidden");

              const canvas = fileView.appendChild(document.createElement("canvas"));
              canvas.setAttribute("class", "pdf-canvas");
              const context = canvas.getContext('2d');
              canvas.width = scaledViewport.width;
              canvas.height = scaledViewport.height;

              page.render({ canvasContext: context, viewport: scaledViewport }).promise.then(() => {
                document.getElementById("cc").appendChild(fileView);
                contentList.push(fileView);

                // Process the next page
                resolvePage(processPage(pageIndex + 1));
              });
            }).catch(rejectPage);
          });
        };

        // Start processing from the first page
        await processPage(1);
        resolve();
      }).catch(reject);
    });
  }

  // Handle an image file
  function handleImage(file, index) {
    return new Promise((resolve, reject) => {
      var imageView = document.createElement("div");
      imageView.setAttribute("id", "img-" + index);
      imageView.setAttribute("class", "img-viewer hidden");

      var img = imageView.appendChild(document.createElement("img"));
      img.setAttribute("class", "img-content");
      img.src = "content/" + file;

      document.getElementById("cc").appendChild(imageView);
      contentList.push(imageView);
      img.onerror = reject;
      img.onload = resolve;
    });
  }

  // Handle a video file
  function handleVideo(file, index) {
    return new Promise((resolve, reject) => {
      var videoView = document.createElement("div");
      videoView.setAttribute("id", "video-" + index);
      videoView.setAttribute("class", "video-viewer hidden");
      videoView.setAttribute("data-video-index", videoList.length); // Set the video index as attribute

      var video = videoView.appendChild(document.createElement("video"));
      video.setAttribute("class", "video-content");
      video.src = "content/" + file;
      if (fileList.length == 1) video.loop = true;
      video.autoplay = true;
      video.muted = true;
      video.onended = function () {
        this.currentTime = 0;  // reset video time
        currentIndex++;
        if (currentIndex >= contentList.length) currentIndex = 0;
        isPlaying = false;
        ChangeFile();
      }

      document.getElementById("cc").appendChild(videoView);
      videoList.push(video);
      contentList.push(videoView);
      video.onerror = reject;
      video.oncanplay = resolve;
    });
  }

  // Transition from one piece of content to another
  function ChangeFile() {
    // If a video is still playing, or there is no content in the content folder, or there is only a single content in the folder wich allready have displayed -> return
    if (isPlaying || singleFileDisplayed == true) {
      return;
      //if there is only one file in the content folder and it is not displayed -> display it once and change the boolean to true
    } else if (fileList.length == 1 && document.getElementById("cc").childElementCount == 1 && singleFileDisplayed == false) {
      singleFileDisplayed = true;
    } else if (fileList.length == 0) {
      return;
    }

    var currentContent = contentList[currentIndex];

    contentList.forEach((content, idx) => {
      if (idx === currentIndex) {
        anime({
          targets: content,
          opacity: [0, 1],
          duration: 1000,
          easing: 'easeInOutSine',
          begin: function (anim) {
            content.style.display = 'flex';
          }
        });

        // Play video
        if (content.className.includes("video-viewer")) {
          var videoIndex = parseInt(content.getAttribute('data-video-index')); // Retrieve the video index from attribute
          currentVideo = videoList[videoIndex];

          currentVideo.addEventListener('loadeddata', function () {
            currentVideo.play();
            isPlaying = true;
          }, false);

          currentVideo.addEventListener('error', function () {
            // Video failed to load, move to next content immediately
            currentIndex++;
            if (currentIndex >= contentList.length) currentIndex = 0;
            ChangeFile();
          }, false);
        } else {
          // For non-video content, start the timer immediately
          setTimeout(function () {
            currentIndex++;
            if (currentIndex >= contentList.length) currentIndex = 0;
            ChangeFile();
          }, 5 * 1000);
        }
      } else {
        anime({
          targets: content,
          opacity: [1, 0],
          duration: 1000,
          easing: 'easeInOutSine',
          complete: function (anim) {
            content.style.display = 'none';
          }
        });
      }
    });
  }

  // Add event listener to detect when the tab visibility changes
  document.addEventListener('visibilitychange', function () {
    if (document.visibilityState === 'visible') {
      // Tab has become visible again, so check if content needs updating
      location.reload();
    }
  }, false);

</script>

</html>